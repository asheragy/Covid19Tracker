{"version":3,"sources":["components/Chart.tsx","components/StatePicker.tsx","api/dataClasses.ts","api/DataService.ts","App.tsx","index.tsx"],"names":["Chart","props","React","createRef","chartData","labels","dates","datasets","dataSets","map","dataSet","fill","label","data","pointBackgroundColor","color","pointBorderColor","backgroundColor","borderColor","borderWidth","pointRadius","options","maintainAspectRatio","height","StatePicker","onChange","event","onStateChange","target","value","listItems","x","key","Series","positive","positiveNormalized","deaths","active","percentPositive","percentChange","DataSet","this","parseDate","date","d","toString","dateStr","substr","Date","DataService","state","url","toLowerCase","console","log","fetch","json","jsonData","arrayData","Array","reverse","getSingleData","length","modValue","filter","_","index","firstValidEntry","findIndex","slice","series","positiveWeek","item","Math","round","testsWeek","t","totalTestResults","totalTestsViral","cases","min","normalized","actualCases","percentDiff","death","percent","styles","App","useState","setDates","setCases","setDeaths","setActive","setPercentPositive","setPercentChange","a","service","getSeries","getUTCMonth","getUTCDate","Colors","LightBlue","Blue","Red","Green","Yellow","Orange","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9564b103.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Chart as ChartJS } from \"chart.js\";\r\nimport { DataSet } from \"../api/dataClasses\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\ninterface ChartProps {\r\n  dates: string[];\r\n  dataSets: DataSet[];\r\n}\r\n\r\nfunction Chart(props: ChartProps) {\r\n  const chartRef: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n  const chartData = {\r\n    labels: props.dates,\r\n    datasets: props.dataSets.map((dataSet) => ({\r\n      fill: false,\r\n      label: dataSet.label,\r\n      data: dataSet.data,\r\n      pointBackgroundColor: dataSet.color,\r\n      pointBorderColor: dataSet.color,\r\n      backgroundColor: dataSet.color,\r\n      borderColor: dataSet.color,\r\n      borderWidth: 2,\r\n      pointRadius: 2,\r\n    })),\r\n  };\r\n\r\n  const options: Chart.ChartOptions = {\r\n    maintainAspectRatio: false,\r\n  };\r\n\r\n  return <Line data={chartData} options={options} height={400} />;\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n\r\ninterface StatePickerProps {\r\n  onStateChange: (state: string) => void;\r\n}\r\n\r\nfunction StatePicker(props: StatePickerProps) {\r\n  const onStateChange = (event: any) => {\r\n    props.onStateChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <select onChange={onStateChange}>\r\n      {listItems.map((x) => getItem(x.key, x.value))}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default StatePicker;\r\n\r\nfunction getItem(key: string, value: string) {\r\n  return <option value={key}>{value}</option>;\r\n}\r\n\r\nconst listItems = [\r\n  { key: \"us\", value: \"United States\" },\r\n  //{ key: \"upper\", value: \"US - Upper\" },\r\n  //{ key: \"middle\", value: \"US - Middle\" },\r\n  //{ key: \"lower\", value: \"US - Lower\" },\r\n  { key: \"AL\", value: \"Alabama\" },\r\n  { key: \"AK\", value: \"Alaska\" },\r\n  { key: \"AZ\", value: \"Arizona\" },\r\n  { key: \"AR\", value: \"Arkansas\" },\r\n  { key: \"CA\", value: \"California\" },\r\n  { key: \"CO\", value: \"Colorado\" },\r\n  { key: \"CT\", value: \"Connecticut\" },\r\n  { key: \"DE\", value: \"Delaware\" },\r\n  { key: \"FL\", value: \"Florida\" },\r\n  { key: \"GA\", value: \"Georgia\" },\r\n  { key: \"HI\", value: \"Hawaii\" },\r\n  { key: \"ID\", value: \"Idaho\" },\r\n  { key: \"IL\", value: \"Illinois\" },\r\n  { key: \"IN\", value: \"Indiana\" },\r\n  { key: \"IA\", value: \"Iowa\" },\r\n  { key: \"KS\", value: \"Kansas\" },\r\n  { key: \"KY\", value: \"Kentucky\" },\r\n  { key: \"LA\", value: \"Louisiana\" },\r\n  { key: \"ME\", value: \"Maine\" },\r\n  { key: \"MD\", value: \"Maryland\" },\r\n  { key: \"MA\", value: \"Massachusetts\" },\r\n  { key: \"MI\", value: \"Michigan\" },\r\n  { key: \"MN\", value: \"Minnesota\" },\r\n  { key: \"MS\", value: \"Mississippi\" },\r\n  { key: \"MO\", value: \"Missouri\" },\r\n  { key: \"MT\", value: \"Montana\" },\r\n  { key: \"NE\", value: \"Nebraska\" },\r\n  { key: \"NV\", value: \"Nevada\" },\r\n  { key: \"NH\", value: \"New Hampshire\" },\r\n  { key: \"NJ\", value: \"New Jersey\" },\r\n  { key: \"NM\", value: \"New Mexico\" },\r\n  { key: \"NY\", value: \"New York\" },\r\n  { key: \"NC\", value: \"North Carolina\" },\r\n  { key: \"ND\", value: \"North Dakota\" },\r\n  { key: \"OH\", value: \"Ohio\" },\r\n  { key: \"OK\", value: \"Oklahoma\" },\r\n  { key: \"OR\", value: \"Oregon\" },\r\n  { key: \"PA\", value: \"Pennsylvania\" },\r\n  { key: \"RI\", value: \"Rhode Island\" },\r\n  { key: \"SC\", value: \"South Carolina\" },\r\n  { key: \"SD\", value: \"South Dakota\" },\r\n  { key: \"TN\", value: \"Tennessee\" },\r\n  { key: \"TX\", value: \"Texas\" },\r\n  { key: \"UT\", value: \"Utah\" },\r\n  { key: \"VT\", value: \"Vermont\" },\r\n  { key: \"VA\", value: \"Virginia\" },\r\n  { key: \"WA\", value: \"Washington\" },\r\n  { key: \"WV\", value: \"West Virginia\" },\r\n  { key: \"WI\", value: \"Wisconsin\" },\r\n  { key: \"WY\", value: \"Wyoming\" },\r\n];\r\n","export class Series {\r\n  positive: number[] = [];\r\n  positiveNormalized: number[] = [];\r\n  deaths: number[] = [];\r\n  active: number[] = [];\r\n  percentPositive: number[] = [];\r\n  percentChange: number[] = [];\r\n  dates: Date[] = [];\r\n}\r\n\r\nexport class SeriesEntry {\r\n  date: Date = new Date();\r\n  positive: number = 0;\r\n  death: number = 0;\r\n  totalTestResults: number = 0;\r\n  totalTestsViral: number = 0;\r\n}\r\n\r\nexport class DataSet {\r\n  constructor(label: string, color: string, data: number[]) {\r\n    this.label = label;\r\n    this.color = color;\r\n    this.data = data;\r\n  }\r\n  color: string;\r\n  data: number[];\r\n  label: string;\r\n}\r\n","import { Series, SeriesEntry } from \"./dataClasses\";\r\n//import allStateData from \"../daily.json\";\r\n\r\n/*\r\nconst uppperStates = [\r\n  \"nj\",\r\n  \"ny\",\r\n  \"ma\",\r\n  \"ct\",\r\n  \"la\",\r\n  \"ms\",\r\n  \"ri\",\r\n  \"nd\",\r\n  \"il\",\r\n  \"dc\",\r\n  \"sd\",\r\n  \"mi\",\r\n  \"az\",\r\n  \"ga\",\r\n  \"fl\",\r\n];\r\nconst middleStates = [\r\n  \"sc\",\r\n  \"in\",\r\n  \"ar\",\r\n  \"pa\",\r\n  \"de\",\r\n  \"md\",\r\n  \"tx\",\r\n  \"al\",\r\n  \"ia\",\r\n  \"nm\",\r\n  \"nv\",\r\n  \"tn\",\r\n  \"mo\",\r\n  \"mn\",\r\n  \"mt\",\r\n  \"wi\",\r\n  \"oh\",\r\n];\r\nconst lowerStates = [\r\n  \"co\",\r\n  \"ks\",\r\n  \"nc\",\r\n  \"id\",\r\n  \"ca\",\r\n  \"ne\",\r\n  \"va\",\r\n  \"ok\",\r\n  \"ky\",\r\n  \"nh\",\r\n  \"wv\",\r\n  \"wa\",\r\n  \"wy\",\r\n  \"ut\",\r\n  \"or\",\r\n  \"hi\",\r\n\r\n  \"ak\",\r\n  \"me\",\r\n  \"vt\",\r\n];\r\n*/\r\n\r\nfunction roundDecimal(value: number) {\r\n  return Math.round((value * 10) / 7) / 10;\r\n}\r\n\r\nfunction parseDate(date: Date) {\r\n  var d = date.toString();\r\n  var dateStr = d.substr(0, 4) + \"-\" + d.substr(4, 2) + \"-\" + d.substr(6, 2);\r\n  return new Date(dateStr);\r\n}\r\n\r\nexport class DataService {\r\n  public async getSingleData(state: string): Promise<Array<SeriesEntry>> {\r\n    var url =\r\n      state == \"us\"\r\n        ? \"https://api.covidtracking.com/v1/us/daily.json\"\r\n        : `https://api.covidtracking.com/v1/states/${state.toLowerCase()}/daily.json`;\r\n\r\n    console.log(url);\r\n\r\n    var data = await fetch(url);\r\n    var jsonData = await data.json();\r\n    var arrayData = Array<Array<SeriesEntry>>(jsonData)[0].reverse();\r\n\r\n    return arrayData;\r\n  }\r\n\r\n  /*\r\n  public async getMergedData(states: string[]): Promise<Array<SeriesEntry>> {\r\n    var filteredData = allStateData as Array<any>;\r\n    filteredData = filteredData.filter((x) => String(x.date) > \"20200316\");\r\n\r\n    var mergedData = filteredData.filter(\r\n      (x) => x.state.toLowerCase() == states[0]\r\n    );\r\n\r\n    states.forEach((state, index) => {\r\n      if (index != 0) {\r\n        var stateData = filteredData.filter(\r\n          (x) => x.state.toLowerCase() == state\r\n        );\r\n\r\n        //console.log(stateData);\r\n\r\n        stateData.forEach((data, index) => {\r\n          mergedData[index].positive += data.positive;\r\n          mergedData[index].death += data.death;\r\n          mergedData[index].totalTestResults += data.totalTestResults;\r\n          mergedData[index].totalTestsViral += data.totalTestsViral;\r\n        });\r\n      }\r\n    });\r\n\r\n    return mergedData.reverse();\r\n  }\r\n  */\r\n\r\n  public async getSeries(state: string): Promise<Series> {\r\n    //if (state == \"upper\")\r\n    //  var arrayData = await this.getMergedData(uppperStates);\r\n    //else if (state == \"middle\")\r\n    //  var arrayData = await this.getMergedData(middleStates);\r\n    //else if (state == \"lower\")\r\n    //  var arrayData = await this.getMergedData(lowerStates);\r\n    //else\r\n    var arrayData = await this.getSingleData(state);\r\n    console.log(`Got ${arrayData.length} entries`);\r\n\r\n    // Filter to weekly data\r\n    var modValue = (arrayData.length - 1) % 7;\r\n    arrayData = arrayData.filter((_, index) => index % 7 == modValue);\r\n\r\n    // Start series when > 100 cases\r\n    var firstValidEntry = arrayData.findIndex((x) => x.positive >= 100);\r\n\r\n    // TODO rename json to something else\r\n    const json = arrayData.slice(firstValidEntry);\r\n\r\n    const series = new Series();\r\n\r\n    const positiveWeek = json.slice(1).map((item, index) => item.positive - json[index].positive);\r\n    series.positive = positiveWeek.map((item) => Math.round(item / 7));\r\n\r\n    const testsWeek = json.slice(1).map((item, index) => {\r\n      var t = item.totalTestResults - json[index].totalTestResults;\r\n      if (t < 0) t = item.totalTestsViral - json[index].totalTestsViral;\r\n      return t;\r\n    });\r\n\r\n    const maxPercentPos = 0.5; // Not useful when larger\r\n    const percentPositive = positiveWeek.map((cases, index) => Math.min(cases / testsWeek[index], maxPercentPos));\r\n\r\n    const normalized = positiveWeek\r\n      .map((actualCases, index) => {\r\n        var percentDiff = percentPositive[index];\r\n        percentDiff *= percentDiff * 2;\r\n        return actualCases * percentDiff + actualCases;\r\n      })\r\n      .map((item) => Math.round(item / 7));\r\n\r\n    series.deaths = json.slice(1).map((item, index) => roundDecimal(item.death - json[index].death));\r\n\r\n    series.active = json\r\n      .map((item, index) => {\r\n        if (index >= 2) {\r\n          var diff = json[index].positive - json[index - 2].positive;\r\n          return diff;\r\n        }\r\n\r\n        return item.positive;\r\n      })\r\n      .slice(1);\r\n\r\n    series.dates = json.map((x) => parseDate(x.date)).slice(1);\r\n    series.positiveNormalized = normalized;\r\n    series.percentPositive = percentPositive.map((x) => Math.round(x * 10000) / 100);\r\n    series.percentChange = normalized.map((x, index) => {\r\n      const weeks = 3;\r\n      if (index < weeks) return 0;\r\n\r\n      var percent = (x - normalized[index - weeks]) / normalized[index - weeks];\r\n      if (percent > 2) percent = 2;\r\n      return Math.round(percent * 10000) / 100;\r\n    });\r\n\r\n    //console.log(series);\r\n    return series;\r\n  }\r\n}\r\n\r\nexport default DataService;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Chart from \"./components/Chart\";\r\nimport StatePicker from \"./components/StatePicker\";\r\nimport DataService from \"./api/DataService\";\r\nimport { DataSet } from \"./api/dataClasses\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nconst styles = {\r\n  chart: \"chart\",\r\n  large: \"large\",\r\n  small: \"small\",\r\n};\r\n\r\nfunction App() {\r\n  const [dates, setDates] = useState<string[]>([]);\r\n  const [cases, setCases] = useState<DataSet[]>([]);\r\n  const [deaths, setDeaths] = useState<DataSet[]>([]);\r\n  const [active, setActive] = useState<DataSet[]>([]);\r\n  const [percentPositive, setPercentPositive] = useState<DataSet[]>([]);\r\n  const [percentChange, setPercentChange] = useState<DataSet[]>([]);\r\n\r\n  const onStateChange = async (x: string) => {\r\n    //console.log(x);\r\n    var service = new DataService();\r\n    var series = await service.getSeries(x);\r\n\r\n    setDates(\r\n      series.dates.map(\r\n        (date) => date.getUTCMonth() + 1 + \"/\" + date.getUTCDate()\r\n      )\r\n    );\r\n    setCases([\r\n      new DataSet(\"Positive / Day\", Colors.LightBlue, series.positive),\r\n      new DataSet(\"Normalized\", Colors.Blue, series.positiveNormalized),\r\n    ]);\r\n\r\n    setDeaths([new DataSet(\"Deaths / Day\", Colors.Red, series.deaths)]);\r\n    setActive([new DataSet(\"Active cases\", Colors.Green, series.active)]);\r\n    setPercentPositive([\r\n      new DataSet(\"% Positive\", Colors.Yellow, series.percentPositive),\r\n    ]);\r\n    setPercentChange([\r\n      new DataSet(\"% Change\", Colors.Orange, series.percentChange),\r\n    ]);\r\n  };\r\n\r\n  // Load first time with data\r\n  // TODO move to an onload event for the StatePicker when list is first filled\r\n  //onStateChange(\"us\");\r\n\r\n  return (\r\n    <div>\r\n      <StatePicker onStateChange={onStateChange} />\r\n      <div className=\"chart\">\r\n        <div className=\"chart-row\">\r\n          <div className={`${styles.chart} ${styles.large}`}>\r\n            <Chart dates={dates} dataSets={cases}></Chart>\r\n          </div>\r\n\r\n          <div className={`${styles.chart} ${styles.small}`}>\r\n            <Chart dates={dates} dataSets={deaths}></Chart>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"chart-row\">\r\n          <div className={`${styles.chart} ${styles.small}`}>\r\n            <Chart dates={dates} dataSets={active}></Chart>\r\n          </div>\r\n\r\n          <div className={`${styles.chart} ${styles.small}`}>\r\n            <Chart dates={dates} dataSets={percentPositive}></Chart>\r\n          </div>\r\n\r\n          <div className={`${styles.chart} ${styles.small}`}>\r\n            <Chart dates={dates} dataSets={percentChange}></Chart>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nclass Colors {\r\n  static Blue = \"rgba(34,132,245,1.0)\";\r\n  static LightBlue = \"rgba(54,162,235,1.0)\";\r\n  static Red = \"rgb(255,99,132)\";\r\n  static Green = \"rgb(75, 192,192)\";\r\n  static Yellow = \"rgb(250, 244, 82)\";\r\n  static Orange = \"rgb(255,159,64)\";\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}